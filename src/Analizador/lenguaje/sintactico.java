
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador.lenguaje;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import AST.error;
import AST.lexema;
import AST.Nodo;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\027" +
    "\004\000\002\027\003\000\002\030\004\000\002\030\004" +
    "\000\002\030\004\000\002\030\004\000\002\030\004\000" +
    "\002\030\003\000\002\030\003\000\002\030\007\000\002" +
    "\030\003\000\002\031\004\000\002\031\005\000\002\031" +
    "\003\000\002\031\004\000\002\043\006\000\002\044\005" +
    "\000\002\044\005\000\002\044\003\000\002\044\003\000" +
    "\002\042\003\000\002\042\003\000\002\026\003\000\002" +
    "\026\003\000\002\025\015\000\002\025\015\000\002\014" +
    "\004\000\002\015\004\000\002\024\011\000\002\017\011" +
    "\000\002\017\012\000\002\023\004\000\002\023\003\000" +
    "\002\023\003\000\002\020\004\000\002\020\003\000\002" +
    "\021\006\000\002\021\011\000\002\013\004\000\002\013" +
    "\003\000\002\045\003\000\002\040\007\000\002\040\005" +
    "\000\002\040\005\000\002\040\003\000\002\012\005\000" +
    "\002\011\003\000\002\007\005\000\002\007\003\000\002" +
    "\006\005\000\002\006\003\000\002\010\003\000\002\004" +
    "\005\000\002\004\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\003\005\000\002\003\004\000" +
    "\002\003\003\000\002\041\004\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\004\000\002\041\004" +
    "\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\022\003\022\004\023\031\026\036\012\037" +
    "\004\040\010\041\016\051\027\001\002\000\004\047\216" +
    "\001\002\000\024\002\000\003\022\004\023\031\026\036" +
    "\012\037\004\040\010\041\016\051\027\001\002\000\006" +
    "\003\154\006\153\001\002\000\004\002\213\001\002\000" +
    "\004\047\207\001\002\000\006\003\154\006\153\001\002" +
    "\000\004\047\200\001\002\000\030\002\ufff7\003\ufff7\004" +
    "\ufff7\031\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\051\ufff7\060\ufff7\001\002\000\004\051\171\001\002\000" +
    "\006\003\154\006\153\001\002\000\004\047\157\001\002" +
    "\000\006\003\154\006\153\001\002\000\006\003\154\006" +
    "\153\001\002\000\030\002\ufff8\003\ufff8\004\ufff8\031\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\051\ufff8\060" +
    "\ufff8\001\002\000\006\003\uffd8\006\uffd8\001\002\000\004" +
    "\051\uffd7\001\002\000\030\002\ufff5\003\ufff5\004\ufff5\031" +
    "\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\051\ufff5" +
    "\060\ufff5\001\002\000\024\002\ufffe\003\ufffe\004\ufffe\031" +
    "\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\051\ufffe\001\002" +
    "\000\004\047\116\001\002\000\010\007\032\016\030\017" +
    "\031\001\002\000\010\003\uffe5\006\uffe5\050\uffe5\001\002" +
    "\000\010\003\uffe4\006\uffe4\050\uffe4\001\002\000\030\003" +
    "\047\011\044\030\033\047\050\051\054\052\051\053\037" +
    "\054\036\055\043\056\052\057\046\001\002\000\030\003" +
    "\047\011\044\030\033\047\050\051\054\052\051\053\037" +
    "\054\036\055\043\056\052\057\046\001\002\000\016\003" +
    "\uffcf\005\uffcf\006\uffcf\026\uffcf\027\113\050\uffcf\001\002" +
    "\000\014\003\uffd1\005\uffd1\006\uffd1\026\111\050\uffd1\001" +
    "\002\000\052\003\uffb2\005\uffb2\006\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
    "\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\027\uffb2\050\uffb2\001\002\000\052\003\uffb4\005\uffb4\006" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\050\uffb4\001\002\000\052" +
    "\003\uffca\005\uffca\006\uffca\010\064\011\065\012\070\013" +
    "\072\014\066\015\063\016\067\017\071\020\107\021\103" +
    "\022\104\023\101\024\106\025\102\026\uffca\027\uffca\050" +
    "\uffca\001\002\000\016\003\uffcd\005\uffcd\006\uffcd\026\uffcd" +
    "\027\uffcd\050\uffcd\001\002\000\052\003\uffbc\005\uffbc\006" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\050\uffbc\001\002\000\052" +
    "\003\uffb3\005\uffb3\006\uffb3\010\uffb3\011\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\050" +
    "\uffb3\001\002\000\030\003\047\011\044\030\033\047\050" +
    "\051\054\052\051\053\037\054\036\055\043\056\052\057" +
    "\046\001\002\000\016\003\uffcc\005\uffcc\006\uffcc\026\uffcc" +
    "\027\uffcc\050\uffcc\001\002\000\052\003\uffb0\005\uffb0\006" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\050\uffb0\001\002\000\052" +
    "\003\uffb7\005\uffb7\006\uffb7\010\uffb7\011\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\050" +
    "\uffb7\001\002\000\030\003\047\011\044\030\033\047\050" +
    "\051\054\052\051\053\037\054\036\055\043\056\052\057" +
    "\046\001\002\000\052\003\uffb5\005\uffb5\006\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\027\uffb5\050\uffb5\001\002\000\052\003\uffb1\005" +
    "\uffb1\006\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1" +
    "\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\050\uffb1\001\002" +
    "\000\006\003\uffd2\006\uffd2\001\002\000\052\003\uffad\005" +
    "\uffad\006\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad" +
    "\015\uffad\016\055\017\056\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\024\uffad\025\uffad\026\uffad\027\uffad\050\uffad\001\002" +
    "\000\052\003\uffaf\005\uffaf\006\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\050\uffaf\001\002\000\052\003\uffae\005\uffae\006\uffae" +
    "\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016" +
    "\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae" +
    "\025\uffae\026\uffae\027\uffae\050\uffae\001\002\000\052\003" +
    "\uffb6\005\uffb6\006\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\050\uffb6" +
    "\001\002\000\004\050\061\001\002\000\052\003\uffb9\005" +
    "\uffb9\006\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\050\uffb9\001\002" +
    "\000\052\003\uffc3\005\uffc3\006\uffc3\010\uffc3\011\uffc3\012" +
    "\070\013\072\014\066\015\063\016\067\017\071\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\050\uffc3\001\002\000\030\003\047\011\044\030\033" +
    "\047\050\051\054\052\051\053\037\054\036\055\043\056" +
    "\052\057\046\001\002\000\030\003\047\011\044\030\033" +
    "\047\050\051\054\052\051\053\037\054\036\055\043\056" +
    "\052\057\046\001\002\000\030\003\047\011\044\030\033" +
    "\047\050\051\054\052\051\053\037\054\036\055\043\056" +
    "\052\057\046\001\002\000\030\003\047\011\044\030\033" +
    "\047\050\051\054\052\051\053\037\054\036\055\043\056" +
    "\052\057\046\001\002\000\052\003\uffbb\005\uffbb\006\uffbb" +
    "\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\050\uffbb\001\002\000\030\003" +
    "\047\011\044\030\033\047\050\051\054\052\051\053\037" +
    "\054\036\055\043\056\052\057\046\001\002\000\052\003" +
    "\uffba\005\uffba\006\uffba\010\uffba\011\uffba\012\uffba\013\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\050\uffba" +
    "\001\002\000\030\003\047\011\044\030\033\047\050\051" +
    "\054\052\051\053\037\054\036\055\043\056\052\057\046" +
    "\001\002\000\052\003\uffbf\005\uffbf\006\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\014\066\015\uffbf\016\067\017\071" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\050\uffbf\001\002\000\052\003\uffc0\005\uffc0" +
    "\006\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\066\015" +
    "\uffc0\016\067\017\071\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\050\uffc0\001\002\000" +
    "\052\003\uffbe\005\uffbe\006\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\013\uffbe\014\066\015\uffbe\016\067\017\071\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\050\uffbe\001\002\000\052\003\uffc1\005\uffc1\006\uffc1\010" +
    "\uffc1\011\uffc1\012\070\013\072\014\066\015\063\016\067" +
    "\017\071\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\050\uffc1\001\002\000\052\003\uffc2" +
    "\005\uffc2\006\uffc2\010\uffc2\011\uffc2\012\070\013\072\014" +
    "\066\015\063\016\067\017\071\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\050\uffc2\001" +
    "\002\000\052\003\uffbd\005\uffbd\006\uffbd\010\uffbd\011\uffbd" +
    "\012\070\013\072\014\066\015\uffbd\016\067\017\071\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\050\uffbd\001\002\000\030\003\uffc4\011\uffc4\030" +
    "\uffc4\047\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\001\002\000\030\003\uffc6\011\uffc6\030" +
    "\uffc6\047\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\001\002\000\030\003\uffc8\011\uffc8\030" +
    "\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\001\002\000\030\003\uffc5\011\uffc5\030" +
    "\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\001\002\000\030\003\047\011\044\030" +
    "\033\047\050\051\054\052\051\053\037\054\036\055\043" +
    "\056\052\057\046\001\002\000\030\003\uffc7\011\uffc7\030" +
    "\uffc7\047\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\001\002\000\030\003\uffc9\011\uffc9\030" +
    "\uffc9\047\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\057\uffc9\001\002\000\036\003\uffcb\005\uffcb\006" +
    "\uffcb\010\064\011\065\012\070\013\072\014\066\015\063" +
    "\016\067\017\071\026\uffcb\027\uffcb\050\uffcb\001\002\000" +
    "\030\003\047\011\044\030\033\047\050\051\054\052\051" +
    "\053\037\054\036\055\043\056\052\057\046\001\002\000" +
    "\016\003\uffd0\005\uffd0\006\uffd0\026\uffd0\027\113\050\uffd0" +
    "\001\002\000\030\003\047\011\044\030\033\047\050\051" +
    "\054\052\051\053\037\054\036\055\043\056\052\057\046" +
    "\001\002\000\016\003\uffce\005\uffce\006\uffce\026\uffce\027" +
    "\uffce\050\uffce\001\002\000\052\003\uffb8\005\uffb8\006\uffb8" +
    "\010\064\011\065\012\070\013\072\014\066\015\063\016" +
    "\067\017\071\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\050\uffb8\001\002\000\030\003" +
    "\047\011\044\030\033\047\050\051\054\052\051\053\037" +
    "\054\036\055\043\056\052\057\046\001\002\000\004\050" +
    "\120\001\002\000\004\034\121\001\002\000\024\003\022" +
    "\004\023\031\026\036\012\037\004\040\010\041\016\051" +
    "\027\060\123\001\002\000\026\003\022\004\023\031\026" +
    "\035\126\036\012\037\004\040\010\041\016\051\027\060" +
    "\127\001\002\000\004\006\125\001\002\000\026\003\ufff2" +
    "\004\ufff2\031\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\051\ufff2\060\ufff2\001\002\000\026\003\ufff1\004\ufff1" +
    "\031\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\051" +
    "\ufff1\060\ufff1\001\002\000\034\002\uffe2\003\uffe2\004\uffe2" +
    "\031\uffe2\032\132\033\137\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\051\uffe2\060\uffe2\001\002\000\004\006\131" +
    "\001\002\000\026\003\ufff4\004\ufff4\031\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\051\ufff4\060\ufff4\001\002" +
    "\000\026\003\ufff3\004\ufff3\031\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\051\ufff3\060\ufff3\001\002\000\004" +
    "\034\150\001\002\000\034\002\uffdf\003\uffdf\004\uffdf\031" +
    "\uffdf\032\132\033\137\035\uffdf\036\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\051\uffdf\060\uffdf\001\002\000\030\002\uffde\003" +
    "\uffde\004\uffde\031\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\051\uffde\060\uffde\001\002\000\034\002\uffdc\003" +
    "\uffdc\004\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\041\uffdc\051\uffdc\060\uffdc\001\002\000" +
    "\030\002\uffe1\003\uffe1\004\uffe1\031\uffe1\035\uffe1\036\uffe1" +
    "\037\uffe1\040\uffe1\041\uffe1\051\uffe1\060\uffe1\001\002\000" +
    "\004\047\140\001\002\000\030\003\047\011\044\030\033" +
    "\047\050\051\054\052\051\053\037\054\036\055\043\056" +
    "\052\057\046\001\002\000\004\050\142\001\002\000\004" +
    "\034\143\001\002\000\024\003\022\004\023\031\026\036" +
    "\012\037\004\040\010\041\016\051\027\060\123\001\002" +
    "\000\026\003\022\004\023\031\026\035\145\036\012\037" +
    "\004\040\010\041\016\051\027\060\127\001\002\000\034" +
    "\002\uffda\003\uffda\004\uffda\031\uffda\032\uffda\033\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\051\uffda\060\uffda" +
    "\001\002\000\030\002\uffe0\003\uffe0\004\uffe0\031\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\051\uffe0\060\uffe0" +
    "\001\002\000\034\002\uffdd\003\uffdd\004\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\051\uffdd\060\uffdd\001\002\000\024\003\022\004\023\031" +
    "\026\036\012\037\004\040\010\041\016\051\027\060\123" +
    "\001\002\000\026\003\022\004\023\031\026\035\152\036" +
    "\012\037\004\040\010\041\016\051\027\060\127\001\002" +
    "\000\034\002\uffdb\003\uffdb\004\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\051\uffdb" +
    "\060\uffdb\001\002\000\030\002\uffeb\003\uffeb\004\uffeb\031" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\051\uffeb" +
    "\060\uffeb\001\002\000\030\002\uffea\003\uffea\004\uffea\031" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\051\uffea" +
    "\060\uffea\001\002\000\030\002\ufffa\003\ufffa\004\ufffa\031" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\051\ufffa" +
    "\060\ufffa\001\002\000\030\002\ufffc\003\ufffc\004\ufffc\031" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\051\ufffc" +
    "\060\ufffc\001\002\000\006\054\161\055\162\001\002\000" +
    "\006\005\163\050\164\001\002\000\006\005\uffec\050\uffec" +
    "\001\002\000\006\005\uffed\050\uffed\001\002\000\006\054" +
    "\165\055\166\001\002\000\006\003\ufff0\006\ufff0\001\002" +
    "\000\006\005\uffee\050\uffee\001\002\000\006\005\uffef\050" +
    "\uffef\001\002\000\030\002\ufffb\003\ufffb\004\ufffb\031\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\051\ufffb\060" +
    "\ufffb\001\002\000\010\003\uffd9\005\174\006\uffd9\001\002" +
    "\000\012\003\uffd3\005\uffd3\006\uffd3\007\172\001\002\000" +
    "\030\003\047\011\044\030\033\047\050\051\054\052\051" +
    "\053\037\054\036\055\043\056\052\057\046\001\002\000" +
    "\010\003\uffd4\005\uffd4\006\uffd4\001\002\000\004\051\175" +
    "\001\002\000\012\003\uffd5\005\uffd5\006\uffd5\007\176\001" +
    "\002\000\030\003\047\011\044\030\033\047\050\051\054" +
    "\052\051\053\037\054\036\055\043\056\052\057\046\001" +
    "\002\000\010\003\uffd6\005\uffd6\006\uffd6\001\002\000\030" +
    "\003\047\011\044\030\033\047\050\051\054\052\051\053" +
    "\037\054\036\055\043\056\052\057\046\001\002\000\004" +
    "\050\202\001\002\000\004\034\203\001\002\000\024\003" +
    "\022\004\023\031\026\036\012\037\004\040\010\041\016" +
    "\051\027\060\123\001\002\000\026\003\022\004\023\031" +
    "\026\035\205\036\012\037\004\040\010\041\016\051\027" +
    "\060\127\001\002\000\030\002\uffe3\003\uffe3\004\uffe3\031" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\051\uffe3" +
    "\060\uffe3\001\002\000\030\002\ufffd\003\ufffd\004\ufffd\031" +
    "\ufffd\035\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\051\ufffd" +
    "\060\ufffd\001\002\000\030\003\047\011\044\030\033\047" +
    "\050\051\054\052\051\053\037\054\036\055\043\056\052" +
    "\057\046\001\002\000\004\050\211\001\002\000\006\003" +
    "\154\006\153\001\002\000\030\002\ufff6\003\ufff6\004\ufff6" +
    "\031\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\051" +
    "\ufff6\060\ufff6\001\002\000\004\002\001\001\002\000\030" +
    "\002\ufff9\003\ufff9\004\ufff9\031\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\051\ufff9\060\ufff9\001\002\000\024" +
    "\002\uffff\003\uffff\004\uffff\031\uffff\036\uffff\037\uffff\040" +
    "\uffff\041\uffff\051\uffff\001\002\000\010\003\022\004\023" +
    "\051\221\001\002\000\004\006\235\001\002\000\004\006" +
    "\222\001\002\000\004\007\032\001\002\000\030\003\047" +
    "\011\044\030\033\047\050\051\054\052\051\053\037\054" +
    "\036\055\043\056\052\057\046\001\002\000\004\006\224" +
    "\001\002\000\004\051\225\001\002\000\006\016\030\017" +
    "\031\001\002\000\004\050\231\001\002\000\004\050\uffe9" +
    "\001\002\000\004\050\uffe8\001\002\000\004\034\232\001" +
    "\002\000\024\003\022\004\023\031\026\036\012\037\004" +
    "\040\010\041\016\051\027\060\123\001\002\000\026\003" +
    "\022\004\023\031\026\035\234\036\012\037\004\040\010" +
    "\041\016\051\027\060\127\001\002\000\030\002\uffe7\003" +
    "\uffe7\004\uffe7\031\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\051\uffe7\060\uffe7\001\002\000\030\003\047\011" +
    "\044\030\033\047\050\051\054\052\051\053\037\054\036" +
    "\055\043\056\052\057\046\001\002\000\004\006\237\001" +
    "\002\000\004\051\225\001\002\000\004\050\241\001\002" +
    "\000\004\034\242\001\002\000\024\003\022\004\023\031" +
    "\026\036\012\037\004\040\010\041\016\051\027\060\123" +
    "\001\002\000\026\003\022\004\023\031\026\035\244\036" +
    "\012\037\004\040\010\041\016\051\027\060\127\001\002" +
    "\000\030\002\uffe6\003\uffe6\004\uffe6\031\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\051\uffe6\060\uffe6\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\032\002\006\012\016\013\010\014\014\015" +
    "\017\017\020\024\023\025\012\027\004\030\024\043\005" +
    "\045\013\001\001\000\002\001\001\000\026\012\016\013" +
    "\010\014\014\015\017\017\020\024\023\025\012\030\214" +
    "\043\005\045\013\001\001\000\004\042\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\167\001" +
    "\001\000\004\042\166\001\001\000\002\001\001\000\004" +
    "\042\155\001\001\000\004\042\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\003\037\004\044" +
    "\006\033\007\034\010\040\011\052\041\041\001\001\000" +
    "\006\003\114\041\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\061\041\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\003\037" +
    "\004\044\006\033\007\034\010\040\011\057\041\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\077\041\041\001\001\000" +
    "\006\003\076\041\041\001\001\000\006\003\075\041\041" +
    "\001\001\000\006\003\074\041\041\001\001\000\002\001" +
    "\001\000\006\003\073\041\041\001\001\000\002\001\001" +
    "\000\006\003\072\041\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\107" +
    "\041\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\037\004\044\006\111\010\040" +
    "\041\041\001\001\000\002\001\001\000\012\003\037\004" +
    "\044\010\113\041\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\037\004\044\006\033\007\034\010" +
    "\040\011\116\041\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\016\013\010\014\014\015\017\017" +
    "\020\024\023\025\012\030\123\031\121\043\005\045\013" +
    "\001\001\000\026\012\016\013\010\014\014\015\017\017" +
    "\020\024\023\025\012\030\127\043\005\045\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\132\021\134\022\133\023\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\146\022\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\037\004\044\006\033\007\034\010\040\011\140" +
    "\041\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\016\013\010\014\014\015\017\017\020\024\023" +
    "\025\012\030\123\031\143\043\005\045\013\001\001\000" +
    "\026\012\016\013\010\014\014\015\017\017\020\024\023" +
    "\025\012\030\127\043\005\045\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\012\016" +
    "\013\010\014\014\015\017\017\020\024\023\025\012\030" +
    "\123\031\150\043\005\045\013\001\001\000\026\012\016" +
    "\013\010\014\014\015\017\017\020\024\023\025\012\030" +
    "\127\043\005\045\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\037\004" +
    "\044\006\033\007\034\010\040\011\172\041\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\003\037\004\044\006\033\007\034\010\040\011\176" +
    "\041\041\001\001\000\002\001\001\000\020\003\037\004" +
    "\044\006\033\007\034\010\040\011\200\041\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\016\013" +
    "\010\014\014\015\017\017\020\024\023\025\012\030\123" +
    "\031\203\043\005\045\013\001\001\000\026\012\016\013" +
    "\010\014\014\015\017\017\020\024\023\025\012\030\127" +
    "\043\005\045\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\003\037\004\044\006\033\007\034\010\040" +
    "\011\207\041\041\001\001\000\002\001\001\000\004\042" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\217\013\216\045" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\037\004\044\006\033\007\034\010" +
    "\040\011\222\041\041\001\001\000\002\001\001\000\010" +
    "\014\226\015\227\026\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\016\013\010\014\014\015\017\017" +
    "\020\024\023\025\012\030\123\031\232\043\005\045\013" +
    "\001\001\000\026\012\016\013\010\014\014\015\017\017" +
    "\020\024\023\025\012\030\127\043\005\045\013\001\001" +
    "\000\002\001\001\000\020\003\037\004\044\006\033\007" +
    "\034\010\040\011\235\041\041\001\001\000\002\001\001" +
    "\000\010\014\226\015\227\026\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\016\013\010\014\014" +
    "\015\017\017\020\024\023\025\012\030\123\031\242\043" +
    "\005\045\013\001\001\000\026\012\016\013\010\014\014" +
    "\015\017\017\020\024\023\025\012\030\127\043\005\045" +
    "\013\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public String cadena="";    	
	public ArrayList<error> listaErrores = new ArrayList();
	public static Nodo raiz ;

	public String ConvertirObjectToString(Object Obj)
	 {
		String Str="";
		if(Obj!=null)
		{
			Str = Obj.toString();
		}
		return Str;
	}

	public String quitarComillas(String cadena)
	{
		if(cadena!=null)
		{
			if(!cadena.equals(""))
			{
				String inicio = cadena.substring(0, 1);
				if(inicio.equals("\"") || inicio.equals("\'"))
				{
					return cadena.substring(1, cadena.length()-1);
				}
				return cadena.trim();            
			}
			return cadena.trim();
		}
		return cadena.trim();
	}	


@Override
    public void syntax_error(Symbol cur_token) 
	{        
        List<Integer> listaIdTokens = expected_token_ids();
        LinkedList<String> listaNombres = new LinkedList<String>();
        for (Integer expected : listaIdTokens) 
        {			
            listaNombres.add(symbl_name_from_id(expected));
        }
		listaErrores.add(new error("Sintactico",cur_token.right+1,cur_token.left+1,String.valueOf(cur_token.value),"Se esperaba :"+listaNombres.toString()));
    }

	public void addError(Symbol s)
	{
		listaErrores.add(new error("Sintactico",s.left,s.right+1,ConvertirObjectToString(s.value)));
	}	


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= LISTGENERALES 
            {
              Nodo RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 sintactico.raiz = instrucciones; RESULT = instrucciones;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTGENERALES ::= LISTGENERALES GENERALES 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		lista.add(inst); RESULT = lista;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTGENERALES",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTGENERALES ::= GENERALES 
            {
              Nodo RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		Nodo nodo = new Nodo("instrucciones"); nodo.add(inst); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTGENERALES",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GENERALES ::= DECLARACION FIN 
            {
              Nodo RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo declaracion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT =declaracion;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GENERALES",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GENERALES ::= ASIGNACION FIN 
            {
              Nodo RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo asig = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = asig;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GENERALES",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GENERALES ::= INC FIN 
            {
              Nodo RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo inc = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = inc;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GENERALES",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GENERALES ::= DEC FIN 
            {
              Nodo RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo dec = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = dec;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GENERALES",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GENERALES ::= RUMDASM FIN 
            {
              Nodo RESULT =null;
		int correrleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int correrright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo correr = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = correr;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GENERALES",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GENERALES ::= SI 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = cond;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GENERALES",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GENERALES ::= PARA 
            {
              Nodo RESULT =null;
		int paraleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo para = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = para;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GENERALES",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GENERALES ::= imprimir parA EXPRESION parC FIN 
            {
              Nodo RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		Nodo nodo = new Nodo("imprimir"); nodo.add(expresion); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GENERALES",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GENERALES ::= MIENTRAS 
            {
              Nodo RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo cond = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = cond;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GENERALES",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTCICLO ::= LISTCICLO GENERALES 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo inst = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		lista.add(inst); RESULT = lista;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTCICLO",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTCICLO ::= LISTCICLO smash puntocoma 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		lista.add(new Nodo("smash",b,bleft,bright)); RESULT = lista;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTCICLO",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTCICLO ::= GENERALES 
            {
              Nodo RESULT =null;
		int genleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int genright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo gen = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		Nodo list = new Nodo("instrucciones"); list.add(gen); RESULT = list;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTCICLO",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTCICLO ::= smash puntocoma 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		Nodo list = new Nodo("instrucciones"); list.add(new Nodo("smash",b,bleft,bright)); RESULT = list; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTCICLO",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RUMDASM ::= correrdasm parA LISTARCHIVOS parC 
            {
              Nodo RESULT =null;
		int correrleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int correrright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String correr = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		Nodo nodo = new Nodo("rundasm","rundasm",correrleft,correrright); nodo.add(lista); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RUMDASM",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTARCHIVOS ::= LISTARCHIVOS coma caracter 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 lista.add(new Nodo(cad,"direccion",cadleft,cadright)); RESULT = lista;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTARCHIVOS",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTARCHIVOS ::= LISTARCHIVOS coma cadena 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 lista.add(new Nodo(cad,"direccion",cadleft,cadright)); RESULT = lista;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTARCHIVOS",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTARCHIVOS ::= caracter 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo = new Nodo("archivos"); nodo.add(new Nodo(cad,"direccion",cadleft,cadright)); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTARCHIVOS",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTARCHIVOS ::= cadena 
            {
              Nodo RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo = new Nodo("archivos"); nodo.add(new Nodo(cad,"direccion",cadleft,cadright)); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTARCHIVOS",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FIN ::= puntocoma 
            {
              Nodo RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIN",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FIN ::= error 
            {
              Nodo RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("FIN",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // UNARIO ::= INC 
            {
              Nodo RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int unright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo un = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = un;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // UNARIO ::= DEC 
            {
              Nodo RESULT =null;
		int unleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int unright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo un = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = un;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("UNARIO",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PARA ::= para parA ASIGNACION puntocoma EXPRESION puntocoma UNARIO parC corcheteA LISTCICLO corcheteC 
            {
              Nodo RESULT =null;
		int asignacionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int asignacionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		Nodo asignacion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo operacion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
			Nodo nodo = new Nodo("para");
			nodo.add(asignacion);
			nodo.add(expresion);
			nodo.add(operacion);
			nodo.add(instrucciones);
			RESULT = nodo;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARA",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARA ::= para parA DECLARACION puntocoma EXPRESION puntocoma UNARIO parC corcheteA LISTCICLO corcheteC 
            {
              Nodo RESULT =null;
		int declaracionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).left;
		int declaracionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).right;
		Nodo declaracion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)).value;
		int operacionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int operacionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo operacion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
			Nodo nodo = new Nodo("para");
			nodo.add(declaracion);
			nodo.add(expresion);
			nodo.add(operacion);
			nodo.add(instrucciones);
			RESULT = nodo;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PARA",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INC ::= identificador incremento 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
			
				Nodo nodo = new Nodo("incremento"); 
				nodo.add(new Nodo(id,"identificador",idleft, idright)); 
				nodo.add(new Nodo(inc,inc,incleft,incright)); 
				RESULT = nodo;
			
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INC",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEC ::= identificador decremento 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int incright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String inc = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
				Nodo nodo = new Nodo("decremento"); 
				nodo.add(new Nodo(id,"identificador",idleft, idright)); 
				nodo.add(new Nodo(inc,inc,incleft,incright)); 					
				RESULT = nodo;
			
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DEC",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MIENTRAS ::= mientras parA EXPRESION parC corcheteA LISTCICLO corcheteC 
            {
              Nodo RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
			Nodo nodo = new Nodo("mientras");
			nodo.add(exp);
			nodo.add(lista);
			RESULT = nodo;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("MIENTRAS",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SI ::= si parA EXPRESION parC corcheteA LISTCICLO corcheteC 
            {
              Nodo RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
			Nodo nodo = new Nodo("si");
			nodo.add(condicion);
			nodo.add(instrucciones);
			RESULT = nodo;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SI ::= si parA EXPRESION parC corcheteA LISTCICLO corcheteC LTSINO 
            {
              Nodo RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
			Nodo nodo = new Nodo("si");
			nodo.add(condicion);
			nodo.add(instrucciones);
			nodo.add(lista);
			RESULT = nodo;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SI",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LTSINO ::= LISTSINOS SINO 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo sino = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		lista.add(sino); RESULT = lista;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LTSINO",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LTSINO ::= LISTSINOS 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = lista;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LTSINO",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LTSINO ::= SINO 
            {
              Nodo RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo si = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = si;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LTSINO",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTSINOS ::= LISTSINOS SINOS 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int sinoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sinoright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo sino = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
				lista.add(sino);
				RESULT = lista;
			
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTSINOS",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTSINOS ::= SINOS 
            {
              Nodo RESULT =null;
		int sinleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int sinright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo sin = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT =sin; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTSINOS",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SINOS ::= sino corcheteA LISTCICLO corcheteC 
            {
              Nodo RESULT =null;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
			Nodo nodo = new Nodo("else");
			//nodo.add(condicion);
			nodo.add(instrucciones);
			RESULT = nodo;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SINOS",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SINOS ::= sinosi parA EXPRESION parC corcheteA LISTCICLO corcheteC 
            {
              Nodo RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo condicion = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int instruccionesleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int instruccionesright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo instrucciones = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
			Nodo nodo = new Nodo("elif");			
			nodo.add(condicion);
			nodo.add(instrucciones);
			RESULT = nodo;
		
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("SINOS",15, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= TIPO LISTDECL 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo tipo = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		                     
                    Nodo nodo = new Nodo("declaracion"); 
                    nodo.add(tipo);
                    nodo.add(lista); RESULT = nodo;
                    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= error 
            {
              Nodo RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= integer 
            {
              Nodo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 RESULT = new Nodo(tipo, "tipo", tipoleft, tiporight);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTDECL ::= LISTDECL coma identificador asignacion EXPRESION 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		Nodo aux = new Nodo(id,"variable",idleft,idright); aux.add(exp); lista.add(aux); RESULT = lista;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTDECL",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTDECL ::= LISTDECL coma identificador 
            {
              Nodo RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo lista = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 lista.add(new Nodo(id,"variable",idleft,idright)); RESULT = lista;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTDECL",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTDECL ::= identificador asignacion EXPRESION 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo = new Nodo("lista"); Nodo aux =new Nodo(id,"variable",idleft,idright); aux.add(exp); nodo.add(aux);RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTDECL",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTDECL ::= identificador 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo = new Nodo("lista"); nodo.add(new Nodo(id,"variable",idleft,idright)); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("LISTDECL",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION ::= identificador asignacion EXPRESION 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo exp = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
				Nodo nodo = new Nodo("asignacion");
				//nodo.add(new Nodo(id,"variable",idleft,idright));
				Nodo tmp = new Nodo(id,"variable",idleft,idright);
				tmp.add(exp);
				nodo.add(tmp);
				RESULT = nodo;
			
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPOR 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPOR ::= EXPOR or EXPAND 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
				Nodo nodo = new Nodo(op,"logica",opleft,opright); 
				nodo.add(e1); nodo.add(e2); RESULT=nodo;
			
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXPOR",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPOR ::= EXPAND 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXPOR",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPAND ::= EXPAND and EXPNOT 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
				Nodo nodo = new Nodo(op,"logica",opleft,opright); 
				nodo.add(e1); nodo.add(e2); RESULT=nodo;
			
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXPAND",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPAND ::= EXPNOT 
            {
              Nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT=e;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXPAND",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPNOT ::= RELACIONAL 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT=r;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EXPNOT",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RELACIONAL ::= ARITMETICA OPREL ARITMETICA 
            {
              Nodo RESULT =null;
		int r1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int r1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo r1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int RELACIONALleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int RELACIONALright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo RELACIONAL = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int r2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int r2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		Nodo nodo = RELACIONAL; nodo.add(r1); nodo.add(r2); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RELACIONAL ::= ARITMETICA 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = r;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("RELACIONAL",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPREL ::= igual 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		Nodo nodo = new Nodo(op,"relacional",opleft,opright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPREL ::= diferente 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		Nodo nodo = new Nodo(op,"relacional",opleft,opright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPREL ::= menorque 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		Nodo nodo = new Nodo(op,"relacional",opleft,opright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPREL ::= mayorque 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		Nodo nodo = new Nodo(op,"relacional",opleft,opright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPREL ::= menorIgual 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		Nodo nodo = new Nodo(op,"relacional",opleft,opright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPREL ::= mayorIgual 
            {
              Nodo RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		Nodo nodo = new Nodo(op,"relacional",opleft,opright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARITMETICA ::= menos ARITMETICA 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo = new Nodo("menos",n,nleft,nright); nodo.add(e); RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARITMETICA ::= ARITMETICA mas ARITMETICA 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(op,"suma",opleft,opright); nodo.add(e1); nodo.add(e2); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARITMETICA ::= ARITMETICA menos ARITMETICA 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(op,"resta",opleft,opright); nodo.add(e1); nodo.add(e2); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARITMETICA ::= ARITMETICA multi ARITMETICA 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(op,"multi",opleft,opright); nodo.add(e1); nodo.add(e2); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARITMETICA ::= ARITMETICA div ARITMETICA 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(op.toString(),"div",opleft,opright); nodo.add(e1); nodo.add(e2); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARITMETICA ::= ARITMETICA potencia ARITMETICA 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(op,"pow",opleft,opright); nodo.add(e1); nodo.add(e2); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARITMETICA ::= ARITMETICA modulo ARITMETICA 
            {
              Nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		Nodo e1 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e2 = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(op,"mod",opleft,opright); nodo.add(e1); nodo.add(e2); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARITMETICA ::= PRIMITIVA 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		RESULT = v;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARITMETICA ::= ARITMETICA incremento 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 Nodo nodo = new Nodo("incremento","incremento",pleft,pright); nodo.add(p); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARITMETICA ::= ARITMETICA decremento 
            {
              Nodo RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo p = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 Nodo nodo = new Nodo("decremento","decremento",pleft,pright); nodo.add(p); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARITMETICA ::= parA EXPRESION parC 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = v;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARITMETICA ::= no ARITMETICA 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo = new Nodo("no",n,nleft,nright); nodo.add(e); RESULT = nodo; 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ARITMETICA ::= error 
            {
              Nodo RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("ARITMETICA",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PRIMITIVA ::= identificador ARREGLO 
            {
              Nodo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Nodo arreglo = (Nodo)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		Nodo nodo = new Nodo("acceso"); nodo.add(new Nodo(id,"variable",idleft,idright)); nodo.add(arreglo); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PRIMITIVA ::= entero 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(n,"numerico",nleft,nright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PRIMITIVA ::= decimal 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(n,"numerico",nleft,nright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PRIMITIVA ::= caracter 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(quitarComillas(n),"caracter",nleft,nright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PRIMITIVA ::= cadena 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(quitarComillas(n),"cadena",nleft,nright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PRIMITIVA ::= falso 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(n,"booleano",nleft,nright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PRIMITIVA ::= verdadero 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(n,"booleano",nleft,nright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PRIMITIVA ::= identificador incremento 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
					Nodo raiz = new Nodo("incremento", "incremento",pleft,pright); 
					Nodo nodo= new Nodo(n,"variable",nleft,nright);  
					raiz.add(nodo); 
					RESULT =raiz;
				
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PRIMITIVA ::= identificador decremento 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
					Nodo raiz = new Nodo("decremento", "decremento",pleft,pright); 
					Nodo nodo= new Nodo(n,"variable",nleft,nright);  
					raiz.add(nodo); 
					RESULT =raiz;
				
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PRIMITIVA ::= identificador 
            {
              Nodo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 Nodo nodo= new Nodo(n,"variable",nleft,nright); RESULT = nodo;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("PRIMITIVA",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
