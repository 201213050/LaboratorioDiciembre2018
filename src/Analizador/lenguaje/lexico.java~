/* The following code was generated by JFlex 1.6.1 */

package Analizador.lenguaje;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import AST.error;
import AST.lexema;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexico.jflex</tt>
 */
public class lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int comentarioSimple = 2;
  public static final int comentarioMulti = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  4, 53,  2,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 10, 12,  0, 23, 39, 41, 22, 14, 15, 16, 18, 13, 17,  6, 24, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0, 34, 36, 35, 37,  0, 
     0, 32,  7,  7,  7, 42, 27,  7, 47, 26,  7,  7, 43, 46, 28, 29, 
    51,  7, 33, 45, 30, 52, 31, 50,  7,  7,  7,  0,  0,  0, 38,  7, 
     0, 32,  7,  7,  7, 42, 27,  7, 47, 26,  7,  7, 43, 46, 28, 29, 
    51,  7, 33, 45, 30, 52, 31, 50,  7,  7,  7, 48, 40, 49,  0,  0, 
     0,  0,  0,  0,  0, 53,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  9,  0,  0, 
     0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0, 11,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0, 11,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\2\1"+
    "\1\15\1\1\4\5\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\2\1\1\5\1\1\1\5\1\24\1\25\2\5"+
    "\1\26\1\27\1\26\2\0\1\30\2\0\1\31\1\32"+
    "\2\0\1\33\1\0\2\34\4\5\1\35\1\36\1\37"+
    "\1\40\1\41\1\5\1\0\3\5\1\42\1\0\1\43"+
    "\1\44\2\0\2\33\5\0\1\5\1\45\2\5\1\46"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\7\0\1\5\1\0\1\5\1\47\2\50\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\10\0\2\51\2\52\2\53"+
    "\2\54\2\55\14\0\1\51\17\0\1\51\5\0\1\51"+
    "\6\0\1\51\6\0\1\51\3\0\2\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\242\0\242\0\330\0\u010e"+
    "\0\u0144\0\u017a\0\u01b0\0\u01e6\0\242\0\242\0\242\0\u021c"+
    "\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc"+
    "\0\u0402\0\u0438\0\242\0\u046e\0\u04a4\0\u04da\0\242\0\242"+
    "\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\242\0\242\0\u061e"+
    "\0\u0654\0\242\0\242\0\u021c\0\u068a\0\u0144\0\242\0\u06c0"+
    "\0\u06f6\0\242\0\242\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\242\0\242\0\242"+
    "\0\242\0\242\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u068a"+
    "\0\u0a56\0\242\0\242\0\u0a8c\0\u0ac2\0\u0af8\0\242\0\u0b2e"+
    "\0\u0804\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u010e\0\u0c3c\0\u0c72"+
    "\0\u010e\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec"+
    "\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c"+
    "\0\u0fd2\0\u1008\0\u103e\0\u010e\0\242\0\u010e\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\242\0\u010e\0\242\0\u010e"+
    "\0\242\0\u010e\0\242\0\u010e\0\242\0\u010e\0\u1368\0\u139e"+
    "\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e"+
    "\0\u1584\0\u15ba\0\u0f30\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u14ac\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2"+
    "\0\u1224\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u176a"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1476\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1a28\0\u1b6c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\3\5\1\6\1\7\1\4\1\10\1\11\1\4"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\3\4\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\2\10\1\31\1\32\2\10\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\10\1\44\1\45"+
    "\2\10\1\46\1\47\1\50\1\51\1\10\1\0\2\52"+
    "\2\0\1\53\60\52\1\0\2\52\3\0\13\52\1\54"+
    "\44\52\74\0\1\7\1\55\64\0\1\10\1\0\1\10"+
    "\1\56\21\0\10\10\10\0\2\10\1\0\3\10\2\0"+
    "\3\10\12\0\1\10\117\0\1\57\45\0\1\60\42\0"+
    "\20\61\1\0\45\61\30\0\1\53\56\0\1\62\66\0"+
    "\1\63\43\0\20\64\1\0\45\64\20\0\1\65\6\0"+
    "\1\66\56\0\1\67\100\0\1\70\37\0\1\10\1\0"+
    "\1\10\1\56\21\0\1\10\1\71\6\10\10\0\2\10"+
    "\1\0\3\10\2\0\3\10\6\0\1\10\1\0\1\10"+
    "\1\56\21\0\3\10\1\72\2\10\1\73\1\10\10\0"+
    "\2\10\1\0\3\10\2\0\3\10\6\0\1\10\1\0"+
    "\1\10\1\56\21\0\7\10\1\74\10\0\2\10\1\0"+
    "\3\10\2\0\3\10\6\0\1\10\1\0\1\10\1\56"+
    "\21\0\6\10\1\75\1\10\10\0\2\10\1\0\3\10"+
    "\2\0\3\10\44\0\1\76\65\0\1\77\65\0\1\100"+
    "\72\0\1\101\66\0\1\102\21\0\1\10\1\0\1\10"+
    "\1\56\21\0\10\10\10\0\1\10\1\103\1\0\3\10"+
    "\2\0\3\10\57\0\1\104\14\0\1\10\1\0\1\10"+
    "\1\56\21\0\10\10\10\0\2\10\1\0\1\10\1\105"+
    "\1\10\2\0\3\10\6\0\1\10\1\0\1\10\1\56"+
    "\21\0\10\10\10\0\2\10\1\0\2\10\1\106\2\0"+
    "\3\10\6\0\1\10\1\0\1\10\1\56\21\0\7\10"+
    "\1\107\10\0\2\10\1\0\3\10\2\0\3\10\6\0"+
    "\1\110\104\0\1\111\41\0\14\61\1\112\51\61\26\64"+
    "\1\113\37\64\20\114\1\115\45\114\3\66\1\116\1\117"+
    "\61\66\20\0\1\120\46\0\4\121\22\0\1\122\1\123"+
    "\3\0\1\124\32\0\4\121\1\10\1\0\1\10\1\56"+
    "\16\0\1\122\1\123\1\0\2\10\1\125\5\10\10\0"+
    "\2\10\1\0\3\10\2\0\3\10\6\0\1\10\1\0"+
    "\1\10\1\56\21\0\7\10\1\126\10\0\2\10\1\0"+
    "\3\10\2\0\3\10\6\0\1\10\1\0\1\10\1\56"+
    "\21\0\10\10\10\0\1\10\1\127\1\0\3\10\2\0"+
    "\3\10\6\0\1\10\1\0\1\10\1\56\21\0\10\10"+
    "\10\0\2\10\1\0\3\10\2\0\2\10\1\130\6\0"+
    "\1\10\1\0\1\10\1\56\21\0\7\10\1\131\10\0"+
    "\2\10\1\0\3\10\2\0\3\10\6\0\1\10\1\0"+
    "\1\10\1\56\20\0\1\132\1\133\7\10\10\0\2\10"+
    "\1\0\3\10\2\0\3\10\41\0\1\134\32\0\1\10"+
    "\1\0\1\10\1\56\21\0\6\10\1\135\1\10\10\0"+
    "\2\10\1\0\3\10\2\0\3\10\6\0\1\10\1\0"+
    "\1\10\1\56\20\0\1\136\1\137\7\10\10\0\2\10"+
    "\1\0\3\10\2\0\3\10\6\0\1\10\1\0\1\10"+
    "\1\56\20\0\1\140\1\141\7\10\10\0\2\10\1\0"+
    "\3\10\2\0\3\10\1\0\20\142\1\0\45\142\20\114"+
    "\1\143\45\114\20\0\1\115\6\0\1\117\42\0\1\117"+
    "\61\0\20\144\1\120\7\144\1\0\35\144\20\0\1\145"+
    "\6\0\1\146\56\0\1\147\102\0\1\150\35\0\1\10"+
    "\1\0\1\10\1\56\21\0\3\10\1\151\4\10\10\0"+
    "\2\10\1\0\3\10\2\0\3\10\6\0\1\10\1\0"+
    "\1\10\1\56\21\0\10\10\10\0\2\10\1\152\1\153"+
    "\2\10\2\0\3\10\6\0\1\10\1\0\1\10\1\56"+
    "\21\0\10\10\10\0\1\154\1\10\1\0\3\10\2\0"+
    "\3\10\34\0\1\155\37\0\1\10\1\0\1\10\1\56"+
    "\21\0\1\10\1\156\6\10\10\0\2\10\1\0\3\10"+
    "\2\0\3\10\55\0\2\157\15\0\1\10\1\0\1\10"+
    "\1\56\21\0\10\10\10\0\2\10\1\157\1\160\2\10"+
    "\2\0\3\10\54\0\1\161\17\0\1\10\1\0\1\10"+
    "\1\56\21\0\10\10\10\0\1\10\1\162\1\0\3\10"+
    "\2\0\3\10\35\0\1\163\36\0\1\10\1\0\1\10"+
    "\1\56\21\0\2\10\1\164\5\10\10\0\2\10\1\0"+
    "\3\10\2\0\3\10\1\0\13\142\1\165\52\142\20\114"+
    "\1\143\6\114\1\117\36\114\20\144\1\166\45\144\20\167"+
    "\1\170\45\167\3\146\2\121\22\146\1\171\1\172\3\146"+
    "\1\173\31\146\20\0\1\174\103\0\1\175\34\0\1\10"+
    "\1\0\1\10\1\56\21\0\4\10\1\176\3\10\10\0"+
    "\2\10\1\0\3\10\2\0\3\10\53\0\1\177\20\0"+
    "\1\10\1\0\1\10\1\56\21\0\10\10\10\0\1\200"+
    "\1\10\1\0\3\10\2\0\3\10\60\0\1\201\13\0"+
    "\1\10\1\0\1\10\1\56\21\0\10\10\10\0\2\10"+
    "\1\0\2\10\1\202\2\0\3\10\53\0\1\203\20\0"+
    "\1\10\1\0\1\10\1\56\21\0\10\10\10\0\1\204"+
    "\1\10\1\0\3\10\2\0\3\10\37\0\1\205\34\0"+
    "\1\10\1\0\1\10\1\56\21\0\4\10\1\206\3\10"+
    "\10\0\2\10\1\0\3\10\2\0\3\10\1\0\13\142"+
    "\1\165\7\142\1\207\42\142\20\144\1\166\7\144\1\117"+
    "\35\144\20\167\1\210\45\167\20\0\1\170\6\0\1\121"+
    "\36\0\3\146\2\121\13\146\1\211\6\146\1\171\1\172"+
    "\3\146\1\173\34\146\2\121\13\146\1\212\6\146\1\171"+
    "\1\172\3\146\1\173\34\146\2\121\22\146\1\171\1\172"+
    "\3\146\1\173\1\213\30\146\20\214\1\174\7\214\1\0"+
    "\35\214\13\142\1\165\11\142\1\112\40\142\20\167\1\210"+
    "\6\167\1\121\36\167\3\215\2\216\13\215\1\146\6\215"+
    "\1\217\1\220\3\215\1\221\31\215\3\146\2\121\13\146"+
    "\1\222\6\146\1\171\1\172\3\146\1\173\34\146\2\121"+
    "\22\146\1\171\1\172\3\146\1\173\1\146\1\223\27\146"+
    "\20\214\1\224\45\214\3\215\2\216\13\215\1\225\6\215"+
    "\1\217\1\220\3\215\1\221\31\215\1\167\4\216\13\167"+
    "\1\210\6\167\1\226\1\227\3\167\1\230\31\167\3\215"+
    "\2\216\22\215\1\217\1\220\3\215\1\221\34\215\2\216"+
    "\13\215\1\231\6\215\1\217\1\220\3\215\1\221\34\215"+
    "\2\216\13\215\1\225\6\215\1\217\1\220\3\215\1\221"+
    "\1\232\30\215\3\233\2\234\13\233\1\222\6\233\1\235"+
    "\1\172\3\233\1\236\31\233\20\214\1\224\7\214\1\121"+
    "\35\214\3\215\2\216\13\215\1\225\6\215\1\171\1\220"+
    "\3\215\1\221\31\215\20\167\1\237\6\167\1\215\56\167"+
    "\1\240\65\167\1\210\14\167\1\241\30\167\3\215\2\216"+
    "\13\215\1\242\6\215\1\171\1\220\3\215\1\221\34\215"+
    "\2\216\13\215\1\225\6\215\1\217\1\220\3\215\1\221"+
    "\1\215\1\243\27\215\3\233\2\234\13\233\1\222\6\233"+
    "\1\235\4\233\1\236\31\233\1\214\4\234\13\214\1\224"+
    "\6\214\1\244\4\214\1\245\31\214\3\233\2\234\13\233"+
    "\1\246\6\233\1\235\4\233\1\236\34\233\2\234\13\233"+
    "\1\222\6\233\1\235\4\233\1\236\1\247\30\233\20\167"+
    "\1\210\6\167\1\216\56\167\1\250\6\167\1\121\56\167"+
    "\1\210\15\167\1\251\27\167\3\252\2\253\13\252\1\242"+
    "\6\252\1\235\1\220\3\252\1\254\31\252\20\214\1\255"+
    "\6\214\1\233\56\214\1\224\14\214\1\256\30\214\3\252"+
    "\2\253\13\252\1\222\6\252\1\257\1\220\3\252\1\254"+
    "\31\252\3\233\2\234\13\233\1\222\6\233\1\235\4\233"+
    "\1\236\1\233\1\260\27\233\20\261\1\250\6\261\1\234"+
    "\1\167\35\261\3\252\2\253\13\252\1\242\6\252\1\257"+
    "\4\252\1\254\31\252\1\261\4\253\13\261\1\262\6\261"+
    "\1\263\4\261\1\264\31\261\3\252\2\253\13\252\1\242"+
    "\6\252\1\257\4\252\1\254\1\265\30\252\20\261\1\266"+
    "\7\261\1\216\35\261\20\214\1\224\15\214\1\267\27\214"+
    "\3\252\2\253\13\252\1\270\6\252\1\257\4\252\1\254"+
    "\31\252\20\261\1\262\65\261\1\262\6\261\1\234\1\216"+
    "\55\261\1\271\6\261\1\252\56\261\1\262\14\261\1\272"+
    "\30\261\3\252\2\253\13\252\1\242\6\252\1\257\4\252"+
    "\1\254\1\252\1\273\27\252\20\214\1\266\6\214\1\234"+
    "\1\121\35\214\3\252\2\253\13\252\1\242\6\252\1\257"+
    "\1\220\3\252\1\254\31\252\20\261\1\262\6\261\1\253"+
    "\1\216\55\261\1\262\15\261\1\274\27\261";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7506];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\11\6\1\3\11\13\1\1\11\3\1\2\11"+
    "\5\1\2\11\2\1\2\11\1\1\2\0\1\11\2\0"+
    "\2\11\2\0\1\1\1\0\6\1\5\11\1\1\1\0"+
    "\4\1\1\0\2\11\2\0\1\1\1\11\5\0\5\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\7\0\1\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\10\0\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\14\0"+
    "\1\1\17\0\1\1\5\0\1\1\6\0\1\1\6\0"+
    "\1\1\3\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public ArrayList<error> listaLexico=new ArrayList();
    public ArrayList<error> listaerrores = new ArrayList();
    public ArrayList<lexema> lexema_ = new ArrayList();	
	public String urlAuxliar="";
	public Boolean fin=false;
	public String txt_temporal="";
	public int linea=0;
	public int columna=0;
    public int flagInicio = 0;
    public String cadena = "";
    public String estado="";


    public void adderror(int linea, int columna, String valor)
    {
        error errorLexico=new error("Lexico",linea, columna, valor);
        listaerrores.add(errorLexico);
    }

    public void addLexema(String tipo, int linea, int columna, String descripcion, String valor)
    {                                                                               
        lexema simbolo=new lexema(valor, linea, columna, descripcion, tipo);
        Imprimir(simbolo.getTipo() +"\t"+ simbolo.getValor());
        lexema_.add(simbolo);	            
    } 
    public void Imprimir(String cadena)
    {
        System.out.println(cadena);
    }   
 



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return new Symbol(sym.EOF);    
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
                adderror(yyline, yychar, yytext());
            }
          case 46: break;
          case 2: 
            { System.out.println("Salto de linea");
            }
          case 47: break;
          case 3: 
            { yychar=0;
            }
          case 48: break;
          case 4: 
            { addLexema("Valor", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.entero, yychar, yyline, yytext());
            }
          case 49: break;
          case 5: 
            { addLexema("Identificador", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.identificador, yychar, yyline, yytext());
            }
          case 50: break;
          case 6: 
            { addLexema("logico", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.no, yychar, yyline, yytext());
            }
          case 51: break;
          case 7: 
            { addLexema("simbolo", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.coma, yychar, yyline, yytext());
            }
          case 52: break;
          case 8: 
            { addLexema("simbolo", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.parA, yychar, yyline, yytext());
            }
          case 53: break;
          case 9: 
            { addLexema("simbolo", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.parC, yychar, yyline, yytext());
            }
          case 54: break;
          case 10: 
            { addLexema("aritmetico", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.multi, yychar, yyline, yytext());
            }
          case 55: break;
          case 11: 
            { addLexema("aritmetico", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.menos, yychar, yyline, yytext());
            }
          case 56: break;
          case 12: 
            { addLexema("aritmetico", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.mas, yychar, yyline, yytext());
            }
          case 57: break;
          case 13: 
            { addLexema("aritmetico", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.div, yychar, yyline, yytext());
            }
          case 58: break;
          case 14: 
            { addLexema("simbolo", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.puntocoma, yychar, yyline, yytext());
            }
          case 59: break;
          case 15: 
            { addLexema("simbolo", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.asignacion, yychar, yyline, yytext());
            }
          case 60: break;
          case 16: 
            { addLexema("relacional", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.menorque, yychar, yyline, yytext());
            }
          case 61: break;
          case 17: 
            { addLexema("relacional", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.mayorque, yychar, yyline, yytext());
            }
          case 62: break;
          case 18: 
            { addLexema("aritmetico", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.potencia, yychar, yyline, yytext());
            }
          case 63: break;
          case 19: 
            { addLexema("aritmetico", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.modulo, yychar, yyline, yytext());
            }
          case 64: break;
          case 20: 
            { addLexema("simbolo", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.corcheteA, yychar, yyline, yytext());
            }
          case 65: break;
          case 21: 
            { addLexema("simbolo", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.corcheteC, yychar, yyline, yytext());
            }
          case 66: break;
          case 22: 
            { /**/
            }
          case 67: break;
          case 23: 
            { yybegin(YYINITIAL);
            }
          case 68: break;
          case 24: 
            { addLexema("relacional", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.diferente, yychar, yyline, yytext());
            }
          case 69: break;
          case 25: 
            { addLexema("aritmetico", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.decremento, yychar, yyline, yytext());
            }
          case 70: break;
          case 26: 
            { addLexema("aritmetico", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.incremento, yychar, yyline, yytext());
            }
          case 71: break;
          case 27: 
            { Imprimir(yytext());
            }
          case 72: break;
          case 28: 
            { addLexema("reservada", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.si, yychar, yyline, yytext());
            }
          case 73: break;
          case 29: 
            { addLexema("relacional", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.igual, yychar, yyline, yytext());
            }
          case 74: break;
          case 30: 
            { addLexema("relacional", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.menorIgual, yychar, yyline, yytext());
            }
          case 75: break;
          case 31: 
            { addLexema("relacional", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.mayorIgual, yychar, yyline, yytext());
            }
          case 76: break;
          case 32: 
            { addLexema("logico", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.or, yychar, yyline, yytext());
            }
          case 77: break;
          case 33: 
            { addLexema("logico", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.and, yychar, yyline, yytext());
            }
          case 78: break;
          case 34: 
            { addLexema("Valor", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.decimal, yychar, yyline, yytext());
            }
          case 79: break;
          case 35: 
            { addLexema("Valor", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.cadena, yychar, yyline, yytext());
            }
          case 80: break;
          case 36: 
            { addLexema("Valor", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.caracter, yychar, yyline, yytext());
            }
          case 81: break;
          case 37: 
            { addLexema("reservada", yyline, yychar,yytext(), yytext());  	        
            return new Symbol(sym.para, yychar, yyline, yytext());
            }
          case 82: break;
          case 38: 
            { addLexema("reservada", yyline, yychar,yytext(), yytext());  	        
            return new Symbol(sym.var, yychar, yyline, yytext());
            }
          case 83: break;
          case 39: 
            { addLexema("nativa", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.verdadero, yychar, yyline, yytext());
            }
          case 84: break;
          case 40: 
            { addLexema("reservada", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.sinosi, yychar, yyline, yytext());
            }
          case 85: break;
          case 41: 
            { addLexema("sino", yyline, yychar, yytext(), yytext());
            return new Symbol(sym.sino, yychar, yyline, yytext());
            }
          case 86: break;
          case 42: 
            { addLexema("nativa", yyline, yychar,yytext(),yytext());  	        
            return new Symbol(sym.falso, yychar, yyline, yytext());
            }
          case 87: break;
          case 43: 
            { addLexema("reservada", yyline, yychar,yytext(), yytext());  	        
            return new Symbol(sym.smash, yychar, yyline, yytext());
            }
          case 88: break;
          case 44: 
            { addLexema("reservada", yyline, yychar,yytext(), yytext());  	        
            return new Symbol(sym.mientras, yychar, yyline, yytext());
            }
          case 89: break;
          case 45: 
            { addLexema("reservada", yyline, yychar,yytext(), yytext());  	        
            return new Symbol(sym.imprimir, yychar, yyline, yytext());
            }
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
